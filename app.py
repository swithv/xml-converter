"""
Sistema Modular de Convers√£o e Dashboard de NF-e
Arquivo: app.py
"""
import streamlit as st
import pandas as pd
from io import BytesIO
import base64
import os

# Importa m√≥dulos customizados
import nfe_parser
import dashboard_logic

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de NF-e",
    page_icon="logo.png",  # Usa o logo como favicon
    layout="wide"
)

# Inicializa session_state para armazenar DataFrame
if 'df_processado' not in st.session_state:
    st.session_state.df_processado = pd.DataFrame()

# Cabe√ßalho com logo clic√°vel
if os.path.exists("logo.png"):
    col_logo, col_title = st.columns([1, 8])
    
    with col_logo:
        # L√™ o arquivo da imagem e converte para base64
        with open("logo.png", "rb") as img_file:
            img_base64 = base64.b64encode(img_file.read()).decode()
        
        # Cria link clic√°vel com o logo usando HTML
        st.markdown(
            f'''
            <a href="https://www.instagram.com/trr_contabilidade/" target="_blank">
                <img src="data:image/png;base64,{img_base64}" width="80" 
                     style="cursor: pointer; transition: opacity 0.3s;" 
                     onmouseover="this.style.opacity='0.7'" 
                     onmouseout="this.style.opacity='1'"
                     alt="TRR Contabilidade">
            </a>
            ''',
            unsafe_allow_html=True
        )
    
    with col_title:
        st.title("üìä Sistema de Convers√£o e Dashboard de NF-e")
else:
    # Se n√£o houver logo, exibe t√≠tulo normal
    st.title("üìä Sistema de Convers√£o e Dashboard de NF-e")

st.markdown("---")

# Cria as abas
tab1, tab2 = st.tabs(["üîÑ Conversor XML ‚Üí XLSX", "üìà Dashboard"])

# ==================== ABA 1: CONVERSOR ====================
with tab1:
    st.header("Conversor de NF-e (XML para XLSX)")
    
    # Divis√£o em duas colunas: filtros e upload
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("Filtros de Campos")
        
        # Dicion√°rio para armazenar sele√ß√µes
        selected_fields = {}
        
        # Grupo 1: Identifica√ß√£o e Protocolo
        with st.expander("üîç Identifica√ß√£o e Protocolo", expanded=True):
            selected_fields['Chave de Acesso'] = st.checkbox('Chave de Acesso', value=True)
            selected_fields['N√∫mero da NF'] = st.checkbox('N√∫mero da NF', value=True)
            selected_fields['S√©rie'] = st.checkbox('S√©rie')
            selected_fields['Data e Hora de Emiss√£o'] = st.checkbox('Data e Hora de Emiss√£o', value=True)
            selected_fields['Natureza da Opera√ß√£o'] = st.checkbox('Natureza da Opera√ß√£o')
            selected_fields['Status do Protocolo'] = st.checkbox('Status do Protocolo')
        
        # Grupo 2: Emitente e Destinat√°rio
        with st.expander("üë• Emitente e Destinat√°rio", expanded=False):
            selected_fields['CNPJ do Emitente'] = st.checkbox('CNPJ do Emitente')
            selected_fields['Raz√£o Social Emitente'] = st.checkbox('Raz√£o Social Emitente', value=True)
            selected_fields['CNPJ do Destinat√°rio'] = st.checkbox('CNPJ do Destinat√°rio')
            selected_fields['Raz√£o Social Destinat√°rio'] = st.checkbox('Raz√£o Social Destinat√°rio')
            selected_fields['Inscri√ß√£o Estadual Destinat√°rio'] = st.checkbox('Inscri√ß√£o Estadual Destinat√°rio')
        
        # Grupo 3: Detalhes dos Itens
        with st.expander("üì¶ Detalhes dos Itens", expanded=False):
            selected_fields['N√∫mero do Item'] = st.checkbox('N√∫mero do Item')
            selected_fields['Descri√ß√£o do Produto'] = st.checkbox('Descri√ß√£o do Produto')
            selected_fields['CFOP do Item'] = st.checkbox('CFOP do Item')
            selected_fields['Quantidade Comercial'] = st.checkbox('Quantidade Comercial')
            selected_fields['Valor Unit√°rio'] = st.checkbox('Valor Unit√°rio')
        
        # Grupo 4: Totais e Impostos
        with st.expander("üí∞ Totais e Impostos", expanded=False):
            selected_fields['Valor Total da NF'] = st.checkbox('Valor Total da NF', value=True)
            selected_fields['Valor Total dos Produtos'] = st.checkbox('Valor Total dos Produtos')
            selected_fields['Valor Total do ICMS'] = st.checkbox('Valor Total do ICMS')
            selected_fields['Valor Total do IPI'] = st.checkbox('Valor Total do IPI')
    
    with col2:
        st.subheader("Upload de Arquivos")
        
        # Upload de arquivos
        uploaded_files = st.file_uploader(
            "Selecione arquivos XML ou ZIP contendo NF-e",
            type=['xml', 'zip'],
            accept_multiple_files=True,
            help="Voc√™ pode fazer upload de m√∫ltiplos arquivos XML ou arquivos ZIP contendo XMLs"
        )
        
        if uploaded_files:
            st.info(f"üìÅ {len(uploaded_files)} arquivo(s) carregado(s)")
            
            # Bot√£o para processar
            if st.button("üöÄ Processar Arquivos", type="primary"):
                with st.spinner("Processando arquivos XML..."):
                    try:
                        # Chama fun√ß√£o de processamento
                        df_result = nfe_parser.process_nfe_files(uploaded_files, selected_fields)
                        
                        if df_result.empty:
                            st.warning("‚ö†Ô∏è Nenhum dado foi extra√≠do. Verifique os arquivos e os filtros selecionados.")
                        else:
                            st.session_state.df_processado = df_result
                            st.success(f"‚úÖ Processamento conclu√≠do! {len(df_result)} registro(s) extra√≠do(s).")
                    except Exception as e:
                        st.error(f"‚ùå Erro ao processar arquivos: {str(e)}")
        
        # Exibe resultado se houver dados processados
        if not st.session_state.df_processado.empty:
            st.subheader("üìä Dados Extra√≠dos")
            st.dataframe(st.session_state.df_processado, use_container_width=True, height=400)
            
            # Bot√£o de download
            st.subheader("üíæ Download")
            
            # Converte DataFrame para CSV
            csv = st.session_state.df_processado.to_csv(index=False, encoding='utf-8-sig')
            
            st.download_button(
                label="üì• Baixar CSV",
                data=csv,
                file_name="nfe_consolidado.csv",
                mime="text/csv",
                help="Baixar dados em formato CSV"
            )
            
            # Converte DataFrame para Excel
            buffer = BytesIO()
            with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                st.session_state.df_processado.to_excel(writer, index=False, sheet_name='NF-e')
            
            st.download_button(
                label="üì• Baixar XLSX",
                data=buffer.getvalue(),
                file_name="nfe_consolidado.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="Baixar dados em formato Excel"
            )

# ==================== ABA 2: DASHBOARD ====================
with tab2:
    st.header("Dashboard de An√°lise de NF-e")
    
    # Verifica se h√° dados processados
    if st.session_state.df_processado.empty:
        st.info("‚ÑπÔ∏è Nenhum dado dispon√≠vel. Por favor, processe arquivos na aba 'Conversor XML ‚Üí XLSX' primeiro.")
    else:
        df_dashboard = st.session_state.df_processado.copy()
        
        # Filtros do Dashboard
        st.subheader("üîé Filtros")
        
        col_f1, col_f2 = st.columns(2)
        
        with col_f1:
            # Filtro por Emitente
            if 'CNPJ do Emitente' in df_dashboard.columns:
                emitentes = df_dashboard['CNPJ do Emitente'].dropna().unique().tolist()
                if emitentes:
                    selected_emitentes = st.multiselect(
                        "Filtrar por CNPJ do Emitente",
                        options=emitentes,
                        default=emitentes
                    )
                    if selected_emitentes:
                        df_dashboard = df_dashboard[df_dashboard['CNPJ do Emitente'].isin(selected_emitentes)]
        
        with col_f2:
            # Filtro por Natureza da Opera√ß√£o
            if 'Natureza da Opera√ß√£o' in df_dashboard.columns:
                naturezas = df_dashboard['Natureza da Opera√ß√£o'].dropna().unique().tolist()
                if naturezas:
                    selected_naturezas = st.multiselect(
                        "Filtrar por Natureza da Opera√ß√£o",
                        options=naturezas,
                        default=naturezas
                    )
                    if selected_naturezas:
                        df_dashboard = df_dashboard[df_dashboard['Natureza da Opera√ß√£o'].isin(selected_naturezas)]
        
        st.markdown("---")
        
        # KPIs
        st.subheader("üìä Indicadores Principais")
        kpis = dashboard_logic.calculate_kpis(df_dashboard)
        
        col_kpi1, col_kpi2, col_kpi3 = st.columns(3)
        
        with col_kpi1:
            st.metric(
                label="üí∞ Valor Total Faturado",
                value=f"R$ {kpis['total_faturado']:,.2f}",
                help="Soma do valor total de todas as NF-e processadas"
            )
        
        with col_kpi2:
            st.metric(
                label="üìÑ Total de NF-e",
                value=f"{kpis['total_nfe']:,}",
                help="N√∫mero de notas fiscais processadas"
            )
        
        with col_kpi3:
            st.metric(
                label="üì¶ M√©dia de Itens/NF",
                value=f"{kpis['media_itens']:.1f}",
                help="M√©dia de itens por nota fiscal"
            )
        
        st.markdown("---")
        
        # Gr√°ficos
        st.subheader("üìà Visualiza√ß√µes")
        
        # Gr√°fico 1: Tend√™ncia de Faturamento
        st.plotly_chart(
            dashboard_logic.create_faturamento_trend(df_dashboard),
            use_container_width=True
        )
        
        # Linha com 2 gr√°ficos lado a lado
        col_g1, col_g2 = st.columns(2)
        
        with col_g1:
            # Gr√°fico 2: Top 10 Produtos
            st.plotly_chart(
                dashboard_logic.create_top_products_chart(df_dashboard),
                use_container_width=True
            )
        
        with col_g2:
            # Gr√°fico 3: Distribui√ß√£o por Natureza
            st.plotly_chart(
                dashboard_logic.create_natureza_pie_chart(df_dashboard),
                use_container_width=True
            )

# Rodap√©
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        Sistema de Convers√£o e Dashboard de NF-e | Desenvolvido com Streamlit
    </div>
    """,
    unsafe_allow_html=True
)